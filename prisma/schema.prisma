// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id          String      @id @db.Uuid @default(uuid()) 
  
  email       String      @unique
  phone       String?      
  firstName   String      @map("first_name")
  lastName    String      @map("last_name")
  password    String      
  role        String      @default("user")

  purchases   Purchase[]
  permissions UserLectureAccess[]
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt      @map("updated_at")

  @@map("user_accounts")
}

model Lecture {
  id          String    @id @default(uuid())  @db.Uuid
  slug        String    @unique
  name        String
  description String    @default("")
  status      Boolean   @default(true)
  
  introVideo  String?   @map("intro_video")
  mainVideo   String    @map("main_video")
  thumbnail   String    @default("")

  misc        Json?     @db.Json 

  duration    Int?      // Duration in seconds
  order       Int       @default(autoincrement())   

  createdAt   DateTime  @default(now())  @map("created_at")
  updatedAt   DateTime  @updatedAt  @map("updated_at")

  // relations
  //productId   String?             @db.Uuid  @map("product_id") 
  productId   String                @unique  @db.Uuid  @map("product_id") 
  mainProduct Product               @relation("main_product", fields: [productId], references: [id])

  tags        LectureTag[]          @relation("LectureTags")
  products    ProductLecture[]
  resources   LectureResource[]
  userAccess  UserLectureAccess[]
  files       File[]     

  @@map("lectures")
}

model Product {
  id          String     @id @db.Uuid @default(uuid())
  slug        String     @unique 
  imgUrl      String?    @map("image_url")
  name        String     
  description String     @default("")
  status      Boolean    @default(true)

  order       Int        @default(autoincrement())   
  price       Int
  discount    Int        @default(0)

  createdAt   DateTime   @default(now())  @map("created_at")
  updatedAt   DateTime   @updatedAt       @map("updated_at")

  lectures    ProductLecture[]
  purchases   Purchase[]

  lecture     Lecture?   @relation("main_product")
  eventTicket EventTicket?
  files       File[]

  @@map("products")
}

model LectureTag {
  id          String    @id @db.Uuid @default(uuid()) 
  name        String    @unique   @db.VarChar(256)
  lectures    Lecture[] @relation("LectureTags")
  
  createdAt   DateTime  @default(now())    @map("created_at")
  updatedAt   DateTime  @updatedAt    @map("updated_at")

  @@map("lecture_tags")
}

model LectureResource {
  id        String   @id @default(uuid()) @db.Uuid
  lectureId String   @db.Uuid  @map("lecture_id")
  type      String   // "pgn", "pdf", "notes", etc.
  name      String    
  url       String?   // File URL
  content   String?

  lecture   Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@map("lecture_resources")
}


model EventTicket {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  date        DateTime
  location    String?
  url         String?
  capacity    Int
  sold        Int      @default(0) @map("sold")

  productId   String   @unique @db.Uuid @map("product_id")
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("event_tickets")
}

model ProductLecture {
  productId String  @db.Uuid  @map("product_id")
  lectureId String  @db.Uuid  @map("lecture_id")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  lecture   Lecture @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@id([productId, lectureId])
  @@map("products_lectures")
}

model Purchase {
  userId      String    @db.Uuid @map("user_id")
  productId   String    @db.Uuid @map("product_id")
  purchasedAt DateTime  @default(now()) @map("purchased_at")

  user        Account   @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
  @@map("purchases")
}

model UserLectureAccess {
  userId    String   @db.Uuid @map("user_id")
  lectureId String   @db.Uuid @map("lecture_id")
  grantedAt DateTime @default(now())  @map("granted_at")

  user      Account  @relation(fields: [userId], references: [id], onDelete: Cascade)
  lecture   Lecture  @relation(fields: [lectureId], references: [id], onDelete: Cascade)

  @@id([userId, lectureId])
  @@map("user_lecture_access")
}


model File {
  id          Int        @id @default(autoincrement())
  filename    String     @db.VarChar(255)
  path        String     @db.VarChar(255)
  mimetype    String     @db.VarChar(50)
  size        Int
  createdAt   DateTime   @default(now())  @map("created_at")
  
  lectureId   String?    @db.Uuid @map("lecture_id")
  productId   String?    @db.Uuid @map("product_id")

  lecture     Lecture?   @relation(fields: [lectureId], references: [id], onDelete: Cascade)
  product     Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("files")
}
